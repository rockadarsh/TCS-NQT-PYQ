Problem Statement – Given a string S(input consisting) of ‘*’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘*’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘*’ and ‘#’ are equal. The ‘*’ and ‘#’ can be at any position in the string.
Note : The output will be a positive or negative integer based on number of ‘*’ and ‘#’ in the input string.

(*>#): positive integer
(#>*): negative integer
(#=*): 0
Example 1:
Input 1:

###***   -> Value of S
Output :

0   → number of * and # are equal

CODE----------------->

// Online C++ compiler to run C++ program online
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int check(vector<char>&str)
{
    unordered_map<char,int>mp,mp2;
    int key,val;
    for(int i=0;i<str.size();i++)
    {
        if(str[i]=='*')
        mp[str[i]]++;
    }
    for(auto it=mp.begin();it!=mp.end();it++)
    {
        key=it->second;
    }
    for(int i=0;i<str.size();i++)
    {
        if(str[i]=='#')
        mp2[str[i]]++;
    }
    for(auto it=mp2.begin();it!=mp2.end();it++)
    {
        val=it->second;
    }
    if(key==val)
    return 0;
    else
    return (key-val);
}
int main()
{
    int n;
    cout<<"enter the length of string"<<endl;
    cin>>n;
    vector<char>st(n);
    cout<<"enter the * and # in the string"<<endl;
    for(int i=0;i<st.size();i++)
    {
        cin>>st[i];
    }
     int ans=check(st);
     cout<<"required value is "<<ans;
    return 0;
}
